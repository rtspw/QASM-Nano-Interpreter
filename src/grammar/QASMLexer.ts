// Generated from ./src/grammar/QASM.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class QASMLexer extends Lexer {
	public static readonly VERSION = 1;
	public static readonly INCLUDE = 2;
	public static readonly QREG = 3;
	public static readonly CREG = 4;
	public static readonly INT = 5;
	public static readonly WS = 6;
	public static readonly Q = 7;
	public static readonly C = 8;
	public static readonly LBRAC = 9;
	public static readonly RBRAC = 10;
	public static readonly SEMIC = 11;
	public static readonly COMMA = 12;
	public static readonly H = 13;
	public static readonly X = 14;
	public static readonly T = 15;
	public static readonly TDG = 16;
	public static readonly CX = 17;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"VERSION", "INCLUDE", "QREG", "CREG", "INT", "WS", "Q", "C", "LBRAC", 
		"RBRAC", "SEMIC", "COMMA", "H", "X", "T", "TDG", "CX",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'OPENQASM 2.0'", "'include \"qelib1.inc\"'", "'qreg'", "'creg'", 
		undefined, undefined, "'q'", "'c'", "'['", "']'", "';'", "','", "'h'", 
		"'x'", "'t'", "'tdg'", "'cx'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "VERSION", "INCLUDE", "QREG", "CREG", "INT", "WS", "Q", "C", 
		"LBRAC", "RBRAC", "SEMIC", "COMMA", "H", "X", "T", "TDG", "CX",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(QASMLexer._LITERAL_NAMES, QASMLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return QASMLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(QASMLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "QASM.g4"; }

	// @Override
	public get ruleNames(): string[] { return QASMLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return QASMLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return QASMLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return QASMLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x13v\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06" +
		"\x06\x06S\n\x06\r\x06\x0E\x06T\x03\x07\x06\x07X\n\x07\r\x07\x0E\x07Y\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03" +
		"\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x02\x02\x02\x13\x03\x02" +
		"\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11" +
		"\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10" +
		"\x1F\x02\x11!\x02\x12#\x02\x13\x03\x02\x04\x03\x022;\x05\x02\v\f\x0E\x0F" +
		"\"\"\x02w\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03" +
		"\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02" +
		"\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02" +
		"\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02" +
		"\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02" +
		"\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x03%\x03\x02\x02\x02" +
		"\x052\x03\x02\x02\x02\x07G\x03\x02\x02\x02\tL\x03\x02\x02\x02\vR\x03\x02" +
		"\x02\x02\rW\x03\x02\x02\x02\x0F]\x03\x02\x02\x02\x11_\x03\x02\x02\x02" +
		"\x13a\x03\x02\x02\x02\x15c\x03\x02\x02\x02\x17e\x03\x02\x02\x02\x19g\x03" +
		"\x02\x02\x02\x1Bi\x03\x02\x02\x02\x1Dk\x03\x02\x02\x02\x1Fm\x03\x02\x02" +
		"\x02!o\x03\x02\x02\x02#s\x03\x02\x02\x02%&\x07Q\x02\x02&\'\x07R\x02\x02" +
		"\'(\x07G\x02\x02()\x07P\x02\x02)*\x07S\x02\x02*+\x07C\x02\x02+,\x07U\x02" +
		"\x02,-\x07O\x02\x02-.\x07\"\x02\x02./\x074\x02\x02/0\x070\x02\x0201\x07" +
		"2\x02\x021\x04\x03\x02\x02\x0223\x07k\x02\x0234\x07p\x02\x0245\x07e\x02" +
		"\x0256\x07n\x02\x0267\x07w\x02\x0278\x07f\x02\x0289\x07g\x02\x029:\x07" +
		"\"\x02\x02:;\x07$\x02\x02;<\x07s\x02\x02<=\x07g\x02\x02=>\x07n\x02\x02" +
		">?\x07k\x02\x02?@\x07d\x02\x02@A\x073\x02\x02AB\x070\x02\x02BC\x07k\x02" +
		"\x02CD\x07p\x02\x02DE\x07e\x02\x02EF\x07$\x02\x02F\x06\x03\x02\x02\x02" +
		"GH\x07s\x02\x02HI\x07t\x02\x02IJ\x07g\x02\x02JK\x07i\x02\x02K\b\x03\x02" +
		"\x02\x02LM\x07e\x02\x02MN\x07t\x02\x02NO\x07g\x02\x02OP\x07i\x02\x02P" +
		"\n\x03\x02\x02\x02QS\t\x02\x02\x02RQ\x03\x02\x02\x02ST\x03\x02\x02\x02" +
		"TR\x03\x02\x02\x02TU\x03\x02\x02\x02U\f\x03\x02\x02\x02VX\t\x03\x02\x02" +
		"WV\x03\x02\x02\x02XY\x03\x02\x02\x02YW\x03\x02\x02\x02YZ\x03\x02\x02\x02" +
		"Z[\x03\x02\x02\x02[\\\b\x07\x02\x02\\\x0E\x03\x02\x02\x02]^\x07s\x02\x02" +
		"^\x10\x03\x02\x02\x02_`\x07e\x02\x02`\x12\x03\x02\x02\x02ab\x07]\x02\x02" +
		"b\x14\x03\x02\x02\x02cd\x07_\x02\x02d\x16\x03\x02\x02\x02ef\x07=\x02\x02" +
		"f\x18\x03\x02\x02\x02gh\x07.\x02\x02h\x1A\x03\x02\x02\x02ij\x07j\x02\x02" +
		"j\x1C\x03\x02\x02\x02kl\x07z\x02\x02l\x1E\x03\x02\x02\x02mn\x07v\x02\x02" +
		"n \x03\x02\x02\x02op\x07v\x02\x02pq\x07f\x02\x02qr\x07i\x02\x02r\"\x03" +
		"\x02\x02\x02st\x07e\x02\x02tu\x07z\x02\x02u$\x03\x02\x02\x02\x05\x02T" +
		"Y\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!QASMLexer.__ATN) {
			QASMLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(QASMLexer._serializedATN));
		}

		return QASMLexer.__ATN;
	}

}

